'use strict';

/**
 * @apiDefine SpellNotFoundError
 *
 * @apiError SpellNotFound Cannot find Spell with given id.
 *
 * @apiErrorExample 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     {
 *         "error": "Cannot find Spell with id :id."
 *     }
 */

var mongoose    = require('mongoose'),
    Spell       = mongoose.model('Spell');


/**
 * @api {get} /spells LIST Spells
 * @apiName ListSpell
 * @apiGroup SPELL
 *
 * @apiDescription List all existing spells.
 *
 * @apiSuccess {String} _id  id of the Spell.
 * @apiSuccess {String} name name of the Spell.
 * @apiSuccess {String} iconUrl  Url of icon corresponding to the Spell.
 * @apiSuccess {String} description  Description of the Spell.
 * @apiSuccess {Element} element [Empty - Do not use ATM] Element of the Spell.
 * @apiSuccess {Number} cost  AP cost to cast the Spell.
 * @apiSuccess {Number} range  Range of the spell, null if no range specified.
 * @apiSuccess {Boolean} line  Specify whether the spell have to be launched in line or not.
 * @apiSuccess {Number} stockpile  AP points given to the stockpile by the Spell.
 * @apiSuccess {Resource[]} resources  Quantity of elemental resources generated by the Spell.
 *
 * @apiSuccessExample Success-Response
 *     HTTP/1.1 200 OK
 *     [
 *         {
 *             "_id": "",
 *             "name": "",
 *             "iconUrl": "",
 *             "description": "",
 *             "element": null,
 *             "cost": 0,
 *             "range": null,
 *             "line": false,
 *             "stockpile": 0,
 *             "resources": [
 *                 "_id": "",
 *                 "quantity": 0,
 *                 "element": ""
 *             ]
 *         }
 *     ]
 *
 * @apiUse UnauthorizedError
 * @apiUse SpellNotFoundError
 */

exports.list_all_spells = function(req, res) {
  Spell.find(req.query, function(err, spell) {
    if (err)
      res.send(err);
    res.json(spell);
  });
};


exports.create_a_spell = function(req, res) {
  var new_spell = new Spell(req.body);
  new_spell.save(function(err, spell) {
    if (err) {
      res.status(400)
      res.send(err);
    }
    res.json(spell);
  });
};


/**
 * @api {get} /spells/:id GET Spell
 * @apiName GetSpell
 * @apiGroup SPELL
 *
 * @apiDescription Request Spell of given id.
 *
 * @apiParam {String} id Spell unique ID.
 *
 * @apiSuccess {String} _id  id of the Spell.
 * @apiSuccess {String} name  name of the Spell.
 * @apiSuccess {String} iconUrl  Url of icon corresponding to the Spell.
 * @apiSuccess {String} description  Description of the Spell.
 * @apiSuccess {Element} element [Empty - Do not use ATM] Element of the Spell.
 * @apiSuccess {Number} cost  AP cost to cast the Spell.
 * @apiSuccess {Number} range  Range of the spell, null if no range specified.
 * @apiSuccess {Boolean} line  Specify whether the spell have to be launched in line or not.
 * @apiSuccess {Number} stockpile  AP points given to the stockpile by the Spell.
 * @apiSuccess {Resource[]} resources  Quantity of elemental resources generated by the Spell.
 *
 * @apiSuccessExample Success-Response
 *     HTTP/1.1 200 OK
 *     {
 *         "_id": "",
 *         "name": "",
 *         "iconUrl": "",
 *         "description": "",
 *         "element": null,
 *         "cost": 0,
 *         "range": null,
 *         "line": false,
 *         "stockpile": 0,
 *         "resources": [
 *             "_id": "",
 *             "quantity": 0,
 *             "element": ""
 *         ]
 *     }
 *
 * @apiUse UnauthorizedError
 * @apiUse SpellNotFoundError
 */


exports.read_a_spell = function(req, res) {
  Spell.findById(req.params.spellId, function(err, spell) {
    if (err)
      return res.send(err);
    if (spell)
      return res.json(spell);
    return res.status(404)
      .json({error: 'Cannot find spell with id ' + req.params.spellId + '.'})
  });
};


exports.update_a_spell = function(req, res) {
  Spell.findByIdAndUpdate({_id: req.params.spellId}, req.body, {new: true}, function(err, spell) {
    if (err)
      return res.send(err);
    if (spell)
      return res.json(spell);
    return res.status(404)
      .json({error: 'Cannot find spell with id ' + req.params.spellId + '.'})
  });
};


exports.delete_a_spell = function(req, res) {
  Spell.deleteOne({_id: req.params.spellId}, function(err, spell) {
    if (err)
      res.send(err);
    res.json({ message: 'Spell successfully deleted.' });
  });
};
